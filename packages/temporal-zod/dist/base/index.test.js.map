{"version":3,"file":"index.test.js","sourceRoot":"","sources":["../../src/base/index.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAC7C,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,EAAE,EAAE,MAAM,QAAQ,CAAC;AAC9C,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AAExB,OAAO,EAAE,SAAS,EAAE,MAAM,eAAe,CAAC;AAC1C,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AACxC,OAAO,EAAE,UAAU,EAAE,kBAAkB,EAAE,MAAM,gBAAgB,CAAC;AAChE,OAAO,EAAE,cAAc,EAAE,MAAM,oBAAoB,CAAC;AACpD,OAAO,EAAE,cAAc,EAAE,sBAAsB,EAAE,MAAM,oBAAoB,CAAC;AAC5E,OAAO,EAAE,eAAe,EAAE,uBAAuB,EAAE,MAAM,qBAAqB,CAAC;AAC/E,OAAO,EAAE,cAAc,EAAE,MAAM,oBAAoB,CAAC;AAEpD,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;IACpC,EAAE,CAAC,6CAA6C,EAAE,GAAG,EAAE;QACrD,MAAM,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC;YACtB,aAAa,EAAE,cAAc;YAC7B,OAAO,EAAE,QAAQ;YACjB,SAAS,EAAE,UAAU;YACrB,iBAAiB,EAAE,kBAAkB;YACrC,aAAa,EAAE,cAAc;YAC7B,QAAQ,EAAE,SAAS;YACnB,cAAc,EAAE,eAAe;YAC/B,sBAAsB,EAAE,uBAAuB;YAC/C,aAAa,EAAE,cAAc;YAC7B,qBAAqB,EAAE,sBAAsB;SAC9C,CAAC,CAAC;QAGH,MAAM,KAAK,GAAG;YACZ,aAAa,EAAE,wCAAwC;YACvD,OAAO,EAAE,sBAAsB;YAC/B,SAAS,EAAE,YAAY;YACvB,iBAAiB,EAAE,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC;YACxD,aAAa,EAAE,qBAAqB;YACpC,QAAQ,EAAE,SAAS;YACnB,cAAc,EAAE,SAAS;YACzB,sBAAsB,EAAE,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC;YAC/D,aAAa,EAAE,OAAO;YACtB,qBAAqB,EAAE,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC;SACxC,CAAC;QAEtB,MAAM,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACnC,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,OAAO,CAClC,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CACjD,CAAC;QACF,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;QACrE,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;QAC3E,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;QAClE,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,OAAO,CAClC,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CACjD,CAAC;QACF,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;QACxE,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,OAAO,CACnC,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CACnD,CAAC;QACF,MAAM,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC;QAC5E,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,OAAO,CAClC,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CACjD,CAAC;QACF,MAAM,CAAC,MAAM,CAAC,qBAAqB,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC;IAC5E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;QAC1C,MAAM,YAAY,GAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;QACnE,MAAM,MAAM,GAAG,QAAQ,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;QAChD,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACpC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oCAAoC,EAAE,GAAG,EAAE;QAC5C,MAAM,cAAc,GAAG,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAC7D,MAAM,MAAM,GAAG,UAAU,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;QACpD,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACpC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6CAA6C,EAAE,GAAG,EAAE;QACrD,MAAM,sBAAsB,GAAG,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACrE,MAAM,MAAM,GAAG,kBAAkB,CAAC,SAAS,CAAC,sBAAsB,CAAC,CAAC;QACpE,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACpC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mCAAmC,EAAE,GAAG,EAAE;QAC3C,MAAM,aAAa,GAAG,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC,CAAC;QACxE,MAAM,MAAM,GAAG,SAAS,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;QAClD,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACpC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8CAA8C,EAAE,GAAG,EAAE;QACtD,MAAM,cAAc,GAAG,iBAAiB,CAAC;QACzC,MAAM,MAAM,GAAG,QAAQ,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;QAClD,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gDAAgD,EAAE,GAAG,EAAE;QACxD,MAAM,gBAAgB,GAAG,cAAc,CAAC;QACxC,MAAM,MAAM,GAAG,UAAU,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;QACtD,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yDAAyD,EAAE,GAAG,EAAE;QACjE,MAAM,wBAAwB,GAAG,uBAAuB,CAAC;QACzD,MAAM,MAAM,GAAG,kBAAkB,CAAC,SAAS,CAAC,wBAAwB,CAAC,CAAC;QACtE,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;QACvD,MAAM,eAAe,GAAG,kBAAkB,CAAC;QAC3C,MAAM,MAAM,GAAG,SAAS,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;QACpD,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { Temporal } from \"temporal-polyfill\";\nimport { describe, expect, it } from \"vitest\";\nimport { z } from \"zod\";\n\nimport { zDuration } from \"./duration.js\";\nimport { zInstant } from \"./instant.js\";\nimport { zPlainDate, zPlainDateInstance } from \"./plainDate.js\";\nimport { zPlainDateTime } from \"./plainDateTime.js\";\nimport { zPlainMonthDay, zPlainMonthDayInstance } from \"./plainMonthDay.js\";\nimport { zPlainYearMonth, zPlainYearMonthInstance } from \"./plainYearMonth.js\";\nimport { zZonedDateTime } from \"./zonedDateTime.js\";\n\ndescribe(\"Temporal Zod Schemas\", () => {\n  it(\"should validate a complex object of strings\", () => {\n    const schema = z.object({\n      zonedDateTime: zZonedDateTime,\n      instant: zInstant,\n      plainDate: zPlainDate,\n      plainDateInstance: zPlainDateInstance,\n      plainDateTime: zPlainDateTime,\n      duration: zDuration,\n      plainYearMonth: zPlainYearMonth,\n      plainYearMonthInstance: zPlainYearMonthInstance,\n      plainMonthDay: zPlainMonthDay,\n      plainMonthDayInstance: zPlainMonthDayInstance,\n    });\n    type InputType = z.input<typeof schema>;\n\n    const input = {\n      zonedDateTime: \"2023-05-15T13:45:30+08:00[Asia/Manila]\",\n      instant: \"2023-01-01T00:00:00Z\",\n      plainDate: \"2023-01-01\",\n      plainDateInstance: Temporal.PlainDate.from(\"2023-01-01\"),\n      plainDateTime: \"2023-01-01T00:00:00\",\n      duration: \"PT1H30M\",\n      plainYearMonth: \"2023-01\",\n      plainYearMonthInstance: Temporal.PlainYearMonth.from(\"2023-01\"),\n      plainMonthDay: \"01-01\",\n      plainMonthDayInstance: Temporal.PlainMonthDay.from(\"01-01\"),\n    } satisfies InputType;\n\n    const result = schema.parse(input);\n    expect(result.zonedDateTime).toEqual(\n      Temporal.ZonedDateTime.from(input.zonedDateTime),\n    );\n    expect(result.instant).toEqual(Temporal.Instant.from(input.instant));\n    expect(result.plainDate).toEqual(Temporal.PlainDate.from(input.plainDate));\n    expect(result.plainDateInstance).toEqual(input.plainDateInstance);\n    expect(result.plainDateTime).toEqual(\n      Temporal.PlainDateTime.from(input.plainDateTime),\n    );\n    expect(result.duration).toEqual(Temporal.Duration.from(input.duration));\n    expect(result.plainYearMonth).toEqual(\n      Temporal.PlainYearMonth.from(input.plainYearMonth),\n    );\n    expect(result.plainYearMonthInstance).toEqual(input.plainYearMonthInstance);\n    expect(result.plainMonthDay).toEqual(\n      Temporal.PlainMonthDay.from(input.plainMonthDay),\n    );\n    expect(result.plainMonthDayInstance).toEqual(input.plainMonthDayInstance);\n  });\n\n  it(\"should validate Temporal.Instant\", () => {\n    const validInstant = Temporal.Instant.from(\"2023-01-01T00:00:00Z\");\n    const result = zInstant.safeParse(validInstant);\n    expect(result.success).toBe(true);\n  });\n\n  it(\"should validate Temporal.PlainDate\", () => {\n    const validPlainDate = Temporal.PlainDate.from(\"2023-01-01\");\n    const result = zPlainDate.safeParse(validPlainDate);\n    expect(result.success).toBe(true);\n  });\n\n  it(\"should validate Temporal.PlainDate instance\", () => {\n    const validPlainDateInstance = Temporal.PlainDate.from(\"2023-01-01\");\n    const result = zPlainDateInstance.safeParse(validPlainDateInstance);\n    expect(result.success).toBe(true);\n  });\n\n  it(\"should validate Temporal.Duration\", () => {\n    const validDuration = Temporal.Duration.from({ hours: 1, minutes: 30 });\n    const result = zDuration.safeParse(validDuration);\n    expect(result.success).toBe(true);\n  });\n\n  it(\"should invalidate incorrect Temporal.Instant\", () => {\n    const invalidInstant = \"invalid-instant\";\n    const result = zInstant.safeParse(invalidInstant);\n    expect(result.success).toBe(false);\n  });\n\n  it(\"should invalidate incorrect Temporal.PlainDate\", () => {\n    const invalidPlainDate = \"invalid-date\";\n    const result = zPlainDate.safeParse(invalidPlainDate);\n    expect(result.success).toBe(false);\n  });\n\n  it(\"should invalidate incorrect Temporal.PlainDate instance\", () => {\n    const invalidPlainDateInstance = \"invalid-date-instance\";\n    const result = zPlainDateInstance.safeParse(invalidPlainDateInstance);\n    expect(result.success).toBe(false);\n  });\n\n  it(\"should invalidate incorrect Temporal.Duration\", () => {\n    const invalidDuration = \"invalid-duration\";\n    const result = zDuration.safeParse(invalidDuration);\n    expect(result.success).toBe(false);\n  });\n});\n"]}